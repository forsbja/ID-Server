
Members: Everest & Jake

Grade:   185/170

Late penalty:

Submission quality (20 points):
	-project layout:
	-build:
	-scripts for running server and client:
	-demo

Features: 
	-basic operations (80 points): 
		-create:
		-delete:
		-lookup:
		-reverse-lookup:
		-modify:
		-get users|uuids|all:
	-security (10 points):
		-encrypted passwords:
		-SSL communication:
	-persistence (10 points)
		-save/restore state:
		-shutdown handler:
	-thread safety:
    
Testing (30 points):	
	-quality of testing:
	-testing documentation (in README):
	
Extra credit (pick one): 
	-using embedded SQL database (+10 points): 
	-using distributed no-SQL database (such as Redis) (+15 points): 

Code style/documentation (20 points):  
	-README file: 
	-coding style:


Comments:
Great work using Redis! Keep in mind a global read/write lock will limit scalability
as we move forward. I also noticed you're unlocking the lock before every return.
You can use a try/finally block to acheive the same effect, and not worry about
forgetting to unlock after adding a new branch. "finally" blocks also execute after
return statements, not just exception throws. I appreciate you showing me the 
encryption through packet sniffing, you're the only group who did that :)

